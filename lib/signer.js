var e=require("node-fetch"),t=require("@metamask/eth-sig-util"),r=require("@ethersproject/bytes"),n=require("@tharsis/proto"),s=require("@tharsis/transactions"),o=require("@hanchon/signature-to-pubkey"),a=require("@tharsis/address-converter");function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var c=/*#__PURE__*/i(e);const u=function(e){try{return Promise.resolve(e.signMessage("generate_pubkey")).then(function(e){return o.signatureToPubkey(e,Buffer.from([50,215,18,245,169,63,252,16,225,169,71,95,254,165,146,216,40,162,115,78,147,125,80,182,25,69,136,250,65,200,94,178]))})}catch(e){return Promise.reject(e)}},m={chainId:9e3,cosmosChainId:"evmos_9000-1"};exports.LOCALNET_CHAIN=m,exports.LOCALNET_FEE={amount:"20",denom:"aevmos",gas:"200000"},exports.MAINNET_CHAIN={chainId:9001,cosmosChainId:"evmos_9001-2"},exports.MAINNET_FEE={amount:"3000000000000000",denom:"aevmos",gas:"150000"},exports.TESTNET_CHAIN={chainId:9e3,cosmosChainId:"evmos_9000-4"},exports.TESTNET_FEE={amount:"5000",denom:"atevmos",gas:"600000"},exports.broadcast=function(e,t="http://127.0.0.1:1317"){try{return Promise.resolve(c.default(`${t}/cosmos/tx/v1beta1/txs`,{method:"post",body:e,headers:{"Content-Type":"application/json"}})).then(function(e){return Promise.resolve(e.json())})}catch(e){return Promise.reject(e)}},exports.generatePubkey=u,exports.getSender=function(e,t="http://127.0.0.1:1317"){try{const r=a.ethToEvmos(e.address);return Promise.resolve(c.default(`${t}/cosmos/auth/v1beta1/accounts/${r}`)).then(function(t){return Promise.resolve(t.json()).then(function(t){function n(e){return{accountAddress:r,sequence:o,accountNumber:s,pubkey:e}}const s=parseInt(t.account.base_account.account_number,10),o=parseInt(t.account.base_account.sequence,10),a=t.account.base_account.pub_key?.key;return a?n(a):Promise.resolve(u(e)).then(n)})})}catch(e){return Promise.reject(e)}},exports.signTransaction=function(e,t,s="BROADCAST_MODE_BLOCK"){try{const o=`0x${Buffer.from(t.signDirect.signBytes,"base64").toString("hex")}`,a=e._signingKey().signDigest(o),i=r.splitSignature(a),c=r.arrayify(r.concat([i.r,i.s])),u=`{ "tx_bytes": [${n.createTxRaw(t.signDirect.body.serializeBinary(),t.signDirect.authInfo.serializeBinary(),[c]).message.serializeBinary().toString()}], "mode": "${s}" }`;return Promise.resolve(u)}catch(e){return Promise.reject(e)}},exports.signTransactionUsingEIP712=function(e,n,o,a=m,i="BROADCAST_MODE_BLOCK"){try{const c=r.arrayify(t.TypedDataUtils.eip712Hash(o.eipToSign,t.SignTypedDataVersion.V4)),u=e._signingKey().signDigest(c),m=r.joinSignature(u),g=s.signatureToWeb3Extension(a,{accountAddress:n},m),y=s.createTxRawEIP712(o.legacyAmino.body,o.legacyAmino.authInfo,g);return Promise.resolve(`{ "tx_bytes": [${y.message.serializeBinary().toString()}], "mode": "${i}" }`)}catch(e){return Promise.reject(e)}};
//# sourceMappingURL=signer.js.map
