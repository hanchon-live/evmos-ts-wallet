import e from"node-fetch";import{TypedDataUtils as t,SignTypedDataVersion as r}from"@metamask/eth-sig-util";import{arrayify as o,joinSignature as n,splitSignature as s,concat as i}from"@ethersproject/bytes";import{createTxRaw as c}from"@tharsis/proto";import{signatureToWeb3Extension as a,createTxRawEIP712 as m}from"@tharsis/transactions";import{signatureToPubkey as u}from"@hanchon/signature-to-pubkey";import{ethToEvmos as h}from"@tharsis/address-converter";const g=function(e,s,i,c=b,u="BROADCAST_MODE_BLOCK"){try{const h=o(t.eip712Hash(i.eipToSign,r.V4)),g=e._signingKey().signDigest(h),f=n(g),y=a(c,{accountAddress:s},f),d=m(i.legacyAmino.body,i.legacyAmino.authInfo,y);return Promise.resolve(`{ "tx_bytes": [${d.message.serializeBinary().toString()}], "mode": "${u}" }`)}catch(e){return Promise.reject(e)}},f=function(e,t,r="BROADCAST_MODE_BLOCK"){try{const n=`0x${Buffer.from(t.signDirect.signBytes,"base64").toString("hex")}`,a=e._signingKey().signDigest(n),m=s(a),u=o(i([m.r,m.s])),h=`{ "tx_bytes": [${c(t.signDirect.body.serializeBinary(),t.signDirect.authInfo.serializeBinary(),[u]).message.serializeBinary().toString()}], "mode": "${r}" }`;return Promise.resolve(h)}catch(e){return Promise.reject(e)}},y=function(t,r="http://127.0.0.1:1317"){try{return Promise.resolve(e(`${r}/cosmos/tx/v1beta1/txs`,{method:"post",body:t,headers:{"Content-Type":"application/json"}})).then(function(e){return Promise.resolve(e.json())})}catch(e){return Promise.reject(e)}},d=function(t,r="http://127.0.0.1:1317"){try{const o=h(t.address);return Promise.resolve(e(`${r}/cosmos/auth/v1beta1/accounts/${o}`)).then(function(e){return Promise.resolve(e.json()).then(function(e){function r(e){return{accountAddress:o,sequence:s,accountNumber:n,pubkey:e}}const n=parseInt(e.account.base_account.account_number,10),s=parseInt(e.account.base_account.sequence,10),i=e.account.base_account.pub_key?.key;return i?r(i):Promise.resolve(p(t)).then(r)})})}catch(e){return Promise.reject(e)}},p=function(e){try{return Promise.resolve(e.signMessage("generate_pubkey")).then(function(e){return u(e,Buffer.from([50,215,18,245,169,63,252,16,225,169,71,95,254,165,146,216,40,162,115,78,147,125,80,182,25,69,136,250,65,200,94,178]))})}catch(e){return Promise.reject(e)}},b={chainId:9e3,cosmosChainId:"evmos_9000-1"},v={amount:"20",denom:"aevmos",gas:"200000"},_={chainId:9001,cosmosChainId:"evmos_9001-2"},l={amount:"3000000000000000",denom:"aevmos",gas:"150000"},P={chainId:9e3,cosmosChainId:"evmos_9000-4"},B={amount:"5000",denom:"atevmos",gas:"600000"};export{b as LOCALNET_CHAIN,v as LOCALNET_FEE,_ as MAINNET_CHAIN,l as MAINNET_FEE,P as TESTNET_CHAIN,B as TESTNET_FEE,y as broadcast,p as generatePubkey,d as getSender,f as signTransaction,g as signTransactionUsingEIP712};
//# sourceMappingURL=signer.module.js.map
